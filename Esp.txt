local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

local Window = WindUI:CreateWindow({
    Title = "Универсальный ESP/AIMBOT | SNT HUB",
    Icon = "eye",
    Author = "SnOwT",
    Folder = "SNT Hub",
    Size = UDim2.fromOffset(440, 320),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    HasOutline = true,
    KeySystem = {
        Key = { "SnowtTest", "SnowtRelease" },
        Note = "Введите ключ.",
        URL = "t.me/supreme_sigma",
        SaveKey = false,
    },
})

Window:EditOpenButton({
    Title = "Открыть UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 10),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("FF0F7B"),
        Color3.fromHex("F89B29")
    ),
    Draggable = true,
})

local Tabs = {
    CharacterTab = Window:Tab({ Title = "Персонаж", Icon = "file-cog", Desc = "Изменение настроек вашего персонажа." }),
    EspTab = Window:Tab({ Title = "ESP", Icon = "eye", Desc = "Позволяет видеть больше чем обычно." }),
    SettingsTab = Window:Tab({ Title = "Настройки", Icon = "battery", Desc = "Различные настройки скрипта." }),
    AimbotTab = Window:Tab({ Title = "Аимбот", Icon = "axe", Desc = "Автонаводка на врагов"
    })
}

local Settings = {
    Enabled = false,
    AimKey = "RightShift",
    AimRadius = 100,
    PredictionFactor = 0.1,
    SmoothingFactor = 0.1,
    TargetPart = "Head",
    OnlyVisible = true,
    TeamCheck = false,
}

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local function isNumber(str)
    return tonumber(str) ~= nil or str == 'inf'
end

getgenv().HitboxSize = 15
getgenv().HitboxTransparency = 0.9
getgenv().HitboxStatus = false
getgenv().TeamCheck = false
getgenv().Walkspeed = localPlayer.Character and localPlayer.Character.Humanoid.WalkSpeed or 16
getgenv().Jumppower = localPlayer.Character and localPlayer.Character.Humanoid.JumpPower or 50
getgenv().TPSpeed = 3
getgenv().TPWalk = false
getgenv().InfJ = false

local espColor = Color3.fromRGB(255, 0, 0)
local espTransparency = 0.5
local Highlight

Window:SelectTab(1)

-- Вкладка "Персонаж"
Tabs.CharacterTab:Input({
    Title = "Изменить скорость ходьбы",
    Default = tostring(getgenv().Walkspeed),
    Placeholder = "Введите скорость ходьбы:",
    Callback = function(input)
        if isNumber(input) then
            getgenv().Walkspeed = tonumber(input)
            if localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid") then
                localPlayer.Character.Humanoid.WalkSpeed = getgenv().Walkspeed
            end
        end
    end,
})

Tabs.CharacterTab:Input({
    Title = "Изменить силу прыжка",
    Default = tostring(getgenv().Jumppower),
    Placeholder = "Введите силу прыжка:",
    Callback = function(input)
        if isNumber(input) then
            getgenv().Jumppower = tonumber(input)
             if localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid") then
                localPlayer.Character.Humanoid.JumpPower = getgenv().Jumppower
             end
        end
    end,
})

Tabs.CharacterTab:Toggle({
    Title = "Изменить хитбокс",
    Default = false,
    Callback = function(state)
        getgenv().HitboxStatus = state
        game:GetService('RunService').RenderStepped:Connect(function()
            if localPlayer and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                if getgenv().HitboxStatus and getgenv().TeamCheck == false then
                    for _, player in pairs(Players:GetPlayers()) do
                        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            pcall(function()
                                player.Character.HumanoidRootPart.Size = Vector3.new(getgenv().HitboxSize, getgenv().HitboxSize, getgenv().HitboxSize)
                                player.Character.HumanoidRootPart.Transparency = getgenv().HitboxTransparency
                                player.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                                player.Character.HumanoidRootPart.Material = "Neon"
                                player.Character.HumanoidRootPart.CanCollide = false
                            end)
                        end
                    end
                elseif getgenv().HitboxStatus and getgenv().TeamCheck == true then
                    for _, player in pairs(Players:GetPlayers()) do
                        if localPlayer.Team ~= player.Team and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            pcall(function()
                                player.Character.HumanoidRootPart.Size = Vector3.new(getgenv().HitboxSize, getgenv().HitboxSize, getgenv().HitboxSize)
                                player.Character.HumanoidRootPart.Transparency = getgenv().HitboxTransparency
                                player.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                                player.Character.HumanoidRootPart.Material = "Neon"
                                player.Character.HumanoidRootPart.CanCollide = false
                            end)
                        end
                    end
                else
                    for _, player in pairs(Players:GetPlayers()) do
                        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            pcall(function()
                                player.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                                player.Character.HumanoidRootPart.Transparency = 1
                                player.Character.HumanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                                player.Character.HumanoidRootPart.Material = "Plastic"
                                player.Character.HumanoidRootPart.CanCollide = false
                            end)
                        end
                    end
                end
            end
        end)
    end,
})

Tabs.CharacterTab:Input({
    Title = "Размер хитбокса",
    Default = tostring(getgenv().HitboxSize),
    Placeholder = "Введите размер хитбокса:",
    Callback = function(input)
        if isNumber(input) then
            getgenv().HitboxSize = tonumber(input)
        end
    end,
})

-- Вкладка "ESP"

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local espNameTags = {}
local espSettings = {
    enabled = false,
    color = Color3.fromRGB(255, 0, 0),
    transparency = 0.5,
    namesEnabled = false,
    teamsEnabled = false,
    healthEnabled = false,
    distanceEnabled = false,
    weaponEnabled = false
}

local function isAlive(player)
    local character = player.Character
    if character and character:FindFirstChild("Humanoid") then
        return character:FindFirstChild("Humanoid").Health > 0
    end
    return false
end

local function getDistance(player)
    if localPlayer and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") and
       player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        return (localPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
    else
        return nil
    end
end

local function getCurrentWeapon(player)
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid and humanoid.Tool ~= nil then
            return humanoid.Tool.Name
        end
    end
    return nil
end

local function createNameTag(targetPlayer)
    if not isAlive(targetPlayer) then return end
    local character = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
    if not character then return end

    local head = character:WaitForChild("Head")
    if not head then return end

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "NameEsp"
    billboardGui.Adornee = head
    billboardGui.AlwaysOnTop = true
    billboardGui.Size = UDim2.new(0, 150, 0, 40) -- Увеличиваем размер для дополнительной информации
    billboardGui.StudsOffsetWorldSpace = Vector3.new(0, 2, 0)

    local mainLabel = Instance.new("TextLabel")
    mainLabel.Size = UDim2.new(1, 0, 1, 0)
    mainLabel.BackgroundTransparency = 1
    mainLabel.Text = targetPlayer.Name
    mainLabel.TextColor3 = Color3.new(1, 1, 1)
    mainLabel.TextScaled = true
    mainLabel.Font = Enum.Font.SourceSansBold
    mainLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    mainLabel.TextStrokeTransparency = 0
    mainLabel.TextSize = 14
    mainLabel.Parent = billboardGui

    espNameTags[targetPlayer] = billboardGui
    return billboardGui
end

local function removeNameTag(targetPlayer)
    if espNameTags[targetPlayer] then
        pcall(function()
            espNameTags[targetPlayer]:Destroy()
        end)
        espNameTags[targetPlayer] = nil
    end
end

local function updateNameTagInfo(player, nameTag)
    if not nameTag or not isAlive(player) then return end

    local text = player.Name
    if espSettings.healthEnabled then
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                text = text .. "\nHealth: " .. math.floor(humanoid.Health)
            end
        end
    end
    if espSettings.distanceEnabled then
        local distance = getDistance(player)
        if distance then
            text = text .. "\nDistance: " .. math.floor(distance)
        end
    end
    if espSettings.weaponEnabled then
        local weapon = getCurrentWeapon(player)
        if weapon then
            text = text .. "\nWeapon: " .. weapon
        end
    end

    local mainLabel = nameTag:FindFirstChild("TextLabel")
    if mainLabel then
        mainLabel.Text = text
    end
end

local function updateNameTagsVisibility()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            local character = player.Character
            if character and character:FindFirstChild("Head") then
                if espSettings.namesEnabled or espSettings.teamsEnabled or espSettings.healthEnabled or espSettings.distanceEnabled or espSettings.weaponEnabled then
                    local nameTag = espNameTags[player]
                    if isAlive(player) then
                        if not nameTag then
                            nameTag = createNameTag(player)
                        end
                        local textColor = Color3.new(1, 1, 1)
                        if espSettings.teamsEnabled then
                            textColor = (player.TeamColor == localPlayer.TeamColor) and Color3.new(0, 255, 0) or Color3.new(255, 255, 255)
                        end
                        local mainLabel = nameTag:FindFirstChild("TextLabel")
                        if mainLabel then
                            mainLabel.TextColor3 = textColor
                        end
                        updateNameTagInfo(player, nameTag)
                    else
                        removeNameTag(player)
                    end
                else
                    removeNameTag(player)
                end
            end
        end
    end
end

local function updateHighlightESP(enabled, color, transparency)
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            if isAlive(player) then
                local highlight = player.Character:FindFirstChild("Highlight")
                if enabled then
                    if not highlight then
                        local newHighlight = Instance.new("Highlight")
                        newHighlight.Parent = player.Character
                        highlight = newHighlight
                    end
                    highlight.FillColor = color
                    highlight.FillTransparency = transparency
                else
                    if highlight then
                        highlight:Destroy()
                    end
                end
            else
                local highlight = player.Character:FindFirstChild("Highlight")
                if highlight then
                    highlight:Destroy()
                end
            end
        end
    end
end

Tabs.EspTab:Toggle({
    Title = "ESP игроков",
    Default = false,
    Callback = function(tog)
        espSettings.enabled = tog
        updateHighlightESP(tog, espSettings.color, espSettings.transparency)
    end,
})

Tabs.EspTab:Dropdown({
    Title = "Цвет ESP",
    Values = { "Green", "Red", "Blue", "Yellow", "Pink", "Purple" },
    Value = "Red",
    Callback = function(option)
        if option == "Green" then
            espSettings.color = Color3.fromRGB(0, 255, 0)
        elseif option == "Red" then
            espSettings.color = Color3.fromRGB(255, 0, 0)
        elseif option == "Blue" then
            espSettings.color = Color3.fromRGB(0, 0, 255)
        elseif option == "Yellow" then
            espSettings.color = Color3.fromRGB(255, 255, 0)
        elseif option == "Pink" then
            espSettings.color = Color3.fromRGB(239, 14, 216)
        elseif option == "Purple" then
            espSettings.color = Color3.fromRGB(180, 14, 240)
        end
        if espSettings.enabled then
            updateHighlightESP(true, espSettings.color, espSettings.transparency)
        end
    end,
})

Tabs.EspTab:Input({
    Title = "Прозрачность ESP",
    Default = "0.5",
    Placeholder = "Введите прозрачность",
    Callback = function(input)
        local value = tonumber(input)
        if typeof(value) == "number" then
            espSettings.transparency = math.clamp(value, 0, 1)
            if espSettings.enabled then
                updateHighlightESP(true, espSettings.color, espSettings.transparency)
            end
        end
    end,
})

Tabs.EspTab:Toggle({
    Title = "ESP имена игроков",
    Default = false,
    Callback = function(enabled)
        espSettings.namesEnabled = enabled
        updateNameTagsVisibility()
    end,
})

Tabs.EspTab:Toggle({
    Title = "ESP команд",
    Default = false,
    Callback = function(Tesp)
        espSettings.teamsEnabled = Tesp
        updateNameTagsVisibility()
    end
})

Tabs.EspTab:Toggle({
    Title = "ESP здоровье игроков",
    Default = false,
    Callback = function(Value)
        espSettings.healthEnabled = Value
        updateNameTagsVisibility()
    end
})

Tabs.EspTab:Toggle({
    Title = "ESP расстояние до игроков",
    Default = false,
    Callback = function(Value)
        espSettings.distanceEnabled = Value
        updateNameTagsVisibility()
    end
})

Tabs.EspTab:Toggle({
    Title = "ESP оружие игроков",
    Default = false,
    Callback = function(Value)
        espSettings.weaponEnabled = Value
        updateNameTagsVisibility()
    end
})

-- Обновление ESP при добавлении/удалении игрока и загрузке чанка
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        task.wait(0.5)
        if espSettings.enabled then
            updateHighlightESP(true, espSettings.color, espSettings.transparency)
        end
        updateNameTagsVisibility()
        if espSettings.namesEnabled or espSettings.teamsEnabled or espSettings.healthEnabled or espSettings.distanceEnabled or espSettings.weaponEnabled then
            createNameTag(player)
            updateNameTagInfo(player, espNameTags[player])
        end
    end)
    if espSettings.namesEnabled or espSettings.teamsEnabled or espSettings.healthEnabled or espSettings.distanceEnabled or espSettings.weaponEnabled then
        createNameTag(player)
        updateNameTagInfo(player, espNameTags[player])
    end
end)

Players.PlayerRemoving:Connect(function(player)
    removeNameTag(player)
    if espSettings.enabled then
        updateHighlightESP(true, espSettings.color, espSettings.transparency)
    end
end)

game:GetService("RunService").Heartbeat:Connect(updateNameTagsVisibility)

-- Вкладка "Аимбот"
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local localPlayer = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local isCameraLocked = false
local lockedPlayer = nil
local defaultCameraType = Enum.CameraType.Custom
local lockRadius = 50 -- Значение по умолчанию для радиуса
local cameraRotationSpeed = 0.1 -- Скорость вращения камеры (чем меньше, тем медленнее)

-- Targeting Indicator (BillboardGui)
local targetIndicator = Instance.new("BillboardGui")
targetIndicator.Size = UDim2.new(2, 0, 1, 0)
targetIndicator.AlwaysOnTop = true
targetIndicator.Enabled = false

local arrow = Instance.new("ImageLabel")
arrow.Size = UDim2.new(1, 0, 1, 0)
arrow.BackgroundTransparency = 1
arrow.Image = "rbxassetid://602361387"
arrow.ImageColor3 = Color3.new(1, 1, 0)
arrow.Position = UDim2.new(0.5, 0, -1.5, 0)
arrow.AnchorPoint = Vector2.new(0.5, 0.5)
arrow.Parent = targetIndicator

targetIndicator.Parent = Workspace

local function getNearestPlayer(radius)
    local nearestPlayer = nil
    local minDistanceSquared = math.huge

    if not localPlayer or not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return nil
    end

    local localRootPart = localPlayer.Character.HumanoidRootPart.Position

    for _, player in Players:GetPlayers() do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local otherRootPart = player.Character.HumanoidRootPart.Position
            local distanceSquared = (localRootPart - otherRootPart).Magnitude^2

            if distanceSquared <= radius^2 and distanceSquared < minDistanceSquared then
                minDistanceSquared = distanceSquared
                nearestPlayer = player
            end
        end
    end
    return nearestPlayer
end

local function getPlayerByName(playerName)
    if playerName == "None" then
        return nil
    end
    for _, player in Players:GetPlayers() do
        if player.Name == playerName and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            return player
        end
    end
    return nil
end

local function updateCameraLookAt()
    if isCameraLocked and localPlayer and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = nil
        if lockedPlayer and lockedPlayer.Character and lockedPlayer.Character:FindFirstChild("HumanoidRootPart") then
            targetPosition = lockedPlayer.Character.HumanoidRootPart.Position
        elseif isCameraLocked then -- Попытка найти ближайшего, если игрок не выбран вручную
            local nearest = getNearestPlayer(lockRadius)
            if nearest then
                lockedPlayer = nearest
                targetPosition = lockedPlayer.Character.HumanoidRootPart.Position
            end
        end

        if targetPosition then
            camera.CameraType = Enum.CameraType.Scriptable
            local localRootPosition = localPlayer.Character.HumanoidRootPart.Position
            local desiredLookAt = targetPosition
            local cameraOffset = Vector3.new(0, 2, 5)
            local desiredCameraPosition = localRootPosition + (desiredLookAt - localRootPosition).Unit * cameraOffset.Z + Vector3.new(0, cameraOffset.Y, 0)

            local currentCF = camera.CFrame
            local desiredCF = CFrame.lookAt(desiredCameraPosition, desiredLookAt)

            camera.CFrame = currentCF:Lerp(desiredCF, cameraRotationSpeed)

            targetIndicator.Adornee = lockedPlayer.Character.HumanoidRootPart
            targetIndicator.Enabled = true
        else
            camera.CameraType = defaultCameraType
            lockedPlayer = nil
            targetIndicator.Enabled = false
        end
    else
        camera.CameraType = defaultCameraType
        lockedPlayer = nil
        targetIndicator.Enabled = false
    end
end

local function getUpdatedPlayerList()
    local dropdownValues = {"None"}
    for _, player in Players:GetPlayers() do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            table.insert(dropdownValues, player.Name)
        end
    end
    table.sort(dropdownValues)
    return dropdownValues
end

local dropdownElement

Tabs.AimbotTab:Toggle({
    Title = "Сфокусировать камеру на игрока",
    Default = false,
    Callback = function(Value)
        isCameraLocked = Value
        if Value == true then
            camera.CameraType = Enum.CameraType.Scriptable
            RunService.RenderStepped:Connect(updateCameraLookAt)
            if dropdownElement then
                dropdownElement:Set("Values", getUpdatedPlayerList())
            end
            if dropdownElement and dropdownElement.Value ~= "None" then
                lockedPlayer = getPlayerByName(dropdownElement.Value)
            elseif Value == true and dropdownElement and dropdownElement.Value == "None" then
                -- При включении и отсутствии выбранного игрока, пытаемся найти ближайшего
                lockedPlayer = getNearestPlayer(lockRadius)
            end
        else
            camera.CameraType = defaultCameraType
            lockedPlayer = nil
            targetIndicator.Enabled = false
            for _, connection in pairs(RunService:GetConnections("RenderStepped")) do
                if connection.Function == updateCameraLookAt then
                    connection:Disconnect()
                    break
                end
            end
        end
    end
})

dropdownElement = Tabs.AimbotTab:Dropdown({
    Title = "Сменить фокус на другого игрока",
    Values = getUpdatedPlayerList(),
    Value = "None",
    Callback = function(selectedPlayerName)
        lockedPlayer = getPlayerByName(selectedPlayerName)
        if lockedPlayer and isCameraLocked then
            print("Camera locked to:", selectedPlayerName)
        elseif isCameraLocked then
            print("Camera lock disabled.")
        end
    end
})

Tabs.AimbotTab:Slider({
    Title = "Радиус фокуса",
    Value = {min = 10, max = 200, default = lockRadius},
    Callback = function(Value)
        lockRadius = Value
        print("Lock radius changed to:", lockRadius)
        if isCameraLocked and not lockedPlayer then -- Если ручной выбор не активен, пытаемся обновить цель
            lockedPlayer = getNearestPlayer(lockRadius)
        end
    end
})

Tabs.AimbotTab:Button({
    Title = "Обновить список игроков",
    Callback = function()
        if dropdownElement then
            dropdownElement:Set("Values", getUpdatedPlayerList())
        end
    end
})

Players.PlayerAdded:Connect(function(player)
    if isCameraLocked and dropdownElement then
        task.wait(0.5)
        dropdownElement:Set("Values", getUpdatedPlayerList())
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if isCameraLocked and dropdownElement then
        dropdownElement:Set("Values", getUpdatedPlayerList())
        if lockedPlayer == player then
            lockedPlayer = nil
            camera.CameraType = defaultCameraType
            targetIndicator.Enabled = false
        end
    end
end)

-- Вкладка "Настройки"
Tabs.SettingsTab:Toggle({
    Title = "Включить/Выключить NoClip",
    Default = false,
    Callback = function(Noclip)
        if Noclip then
            getgenv().Clip = false
            if localPlayer.Character then
                for _, v in pairs(localPlayer.Character:GetDescendants()) do
                    if v:IsA('BasePart') and v.CanCollide and v.Name ~= "HumanoidRootPart" then
                        v.CanCollide = false
                    end
                end
            end
        else
            getgenv().Clip = true
            if localPlayer.Character then
                for _, v in pairs(localPlayer.Character:GetDescendants()) do
                    if v:IsA('BasePart') and not v:IsA("Accessory") and v.Name ~= "HumanoidRootPart" then
                        v.CanCollide = true
                    end
                end
            end
        end
    end
})

Tabs.SettingsTab:Toggle({
    Title = "Бесконечный прыжок",
    Default = false,
    Callback = function(s)
        getgenv().InfJ = s
        game:GetService("UserInputService").JumpRequest:Connect(function()
            if getgenv().InfJ and localPlayer.Character and localPlayer.Character:FindFirstChildOfClass'Humanoid' then
                localPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
            end
        end)
    end
})

Tabs.SettingsTab:Button({
    Title = "Переподключиться",
    Desc = "Переподключает к серверу",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, localPlayer)
    end
})
